#!/bin/bash
# Version 1.0.3.2

# Functions to log error in a standardized manner
function log_error() {
	timestamp=`date`
	echo " - $timestamp - $1" >> $errfile	
}

# Functions to log informational messages in a standardized manner
function log_info() {
	timestamp=`date`
	echo " - $timestamp - $1" >> $logfile
}

# Commit log into history
function log_history() {
	cat $logfile >> $historyfile
	grep -v "$vanishedstring" $errfile >> $historyfile
	grep -v "$vanishedstring" $errfile >&2
	echo >> $historyfile
}

# Variables
suffix=`date +%Y%m%d-%H%M%S`
rsnapshotbin=/usr/bin/rsnapshot
confdir="/etc/rsnapshot.custom.d"
logdir="/tmp/rsnapshot.custom.d"
backupbase="/opt/snapshots"
errfile="$logdir/rsnapshot_error_$suffix"
logfile="$logdir/rsnapshot_log_$suffix"
historyfile="$backupbase/snapshots.log"
vanishedstring="vanished during rsync operation"
vanishedignore=1
interval=$1
error=0
duerror=0

# If not ignoring vanished files, use a random string to match
if [ $vanishedignore -ne 1 ]; then
	vanishedstring=`uuidgen`
fi

# Create log files
mkdir -p "$logdir"
touch $logfile
touch $errfile

# Parameters checking
if [ "$#" -lt 2 ]; then
	log_error "ERROR: Wrong command line"
	log_history
	exit 1
fi
while shift; do
	echo $1
        items="$items $1"
done

# Old log clearing
find "$logdir" -type f -mtime +7 -name "rsnapshot_log_*" -delete
find "$logdir" -type f -mtime +7 -name "rsnapshot_error_*" -delete

# Run rsnapshot and log the results
for item in $items; do
	log_info "Starting $interval $item backup"
        $rsnapshotbin -c $confdir/$item.conf $interval 2>>$errfile >/dev/null
        exit_code=$?
        # Record the worse error happened during rsnapshot executions
        if [ $exit_code -gt 0 ]; then
                if [ $error -eq 0 ] || [ $exit_code -lt $error ]; then
                        error=$exit_code
                fi
        fi
        size=`du -hs $backupbase/$item/$interval.0 2>>$errfile | grep -o ".*[[:space:]]"`
        exit_code=$?
        # Check du error code
        if [ $exit_code -ne 0 ] && [ $interval == "daily" ]; then
                duerror=1
        fi
	log_info "Finished $interval $item backup - Size: $size"
done

# An hard error (exit code 1) occoured. Log and exit, skipping du
if [ $error -eq 1 ]; then
	log_error "ERROR: backup completed, but with some errors"
        log_history
        exit $error
fi

# Du aborted with an error. This means that the backup directory has some
# big problem. Log this situation as an error and exit
if [ $duerror -gt 0 ]; then
	log_error "ERROR: du can not access $backupbase. Please check it"
        log_history
        exit $duerror
fi

# If the only errors are about vanished files, ignore them.
# On empty error file, skip this check.
if [ -s $errfile ] && [ $vanishedignore -eq 1 ]; then
	grep -q -v "$vanishedstring" $errfile || error=0
fi

# If a real error happened, log and report it
if [ $error -gt 0 ]; then
	log_error "ERROR: backup completed, but with some errors"
else
	log_info "SUCCESS: backup completed"
fi

# Final log, then exit
log_history
exit $error

